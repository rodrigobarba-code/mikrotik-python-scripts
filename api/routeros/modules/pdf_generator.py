import pdfkit
import datetime
from jinja2 import Environment, FileSystemLoader


class PDFGenerator:
    def __init__(self, template_path="api/routeros/modules/templates",
                 output_file=f"api/routeros/modules/assets/scan-report-{datetime.datetime.now().strftime('%y%m%d%H%M%S')}.pdf"):
        """
        Creates a new PDFGenerator instance.
        :param template_path: Path to the directory containing the HTML templates.
        :param output_file: Path to the output PDF file.
        """
        self.template_path = template_path
        self.output_file = output_file
        self.environment = Environment(loader=FileSystemLoader(self.template_path))
        self.template = None
        self.data = {}

    def set_template(self, template_name):
        """
        Configure the template to be used for generating the PDF.
        :param template_name: Name of the HTML template file.
        """
        self.template = self.environment.get_template(template_name)

    def add_data(self, key, value):
        """
        Add data to be used in the PDF template.
        :param key: Key to be used in the template.
        :param value: Value to be used in the template.
        """
        self.data[key] = value

    def export(self):
        """
        Export the PDF file using the configured template and data.
        """
        if not self.template:
            raise ValueError("Template not set")

        rendered_html = self.template.render(self.data)

        with open("api/routeros/modules/assets/preview.html", "w", encoding="utf-8") as file:
            file.write(rendered_html)

        pdf_options = {
            'page-size': 'A4',
            'margin-top': '0.4in',
            'margin-right': '0.4in',
            'margin-bottom': '0.75in',
            'margin-left': '0.4in',
            'encoding': "UTF-8",
            'no-outline': None
        }

        pdfkit.from_string(rendered_html, self.output_file, options=pdf_options)

    @staticmethod
    def process_metadata(metadata: dict) -> dict:
        """
        Process the metadata to be used in the PDF template.
        :param metadata: Metadata to be processed.
        :return: Processed metadata.
        """

        response_metadata = {}
        general_report = (
                "This report was generated to show the changes in the network. "
                "It was generated by the Seven Suite Application the " + datetime.datetime.now().strftime(
            '%Y-%m-%d %H:%M:%S' + ".\n\n")
        )

        try:
            if metadata.get('new_data') is not None:
                # Anomalies
                response_metadata['anomalies'] = []

                if not response_metadata['anomalies']:
                    general_report += "First, No anomalies were detected.\n"
                else:
                    general_report += f"First, were detected {len(response_metadata['anomalies'])} anomalies.\n"
                # Anomalies

                # IP Group Additions Data
                if metadata['new_data']['added'] is not None or metadata['new_data']['updated'] is not None:
                    additions_dict = {
                        'connected_ips': [],
                        'blacklist_ips': []
                    }

                    if metadata['new_data']['added'] is not None:
                        for ip in metadata['new_data']['added']:
                            if ip.ip_group_name == 'connected':
                                additions_dict['connected_ips'].append(ip.ip_group_ip)

                    if metadata['new_data']['updated'] is not None:
                        for ip in metadata['new_data']['updated']:
                            if ip.ip_group_name == 'unauthorized':
                                additions_dict['blacklist_ips'].append(ip.ip_group_ip)

                    response_metadata['ip_groups'] = additions_dict

                    if len(additions_dict['connected_ips']) > 0 or len(additions_dict['blacklist_ips']) > 0:
                        general_report += (
                            f"Second, {len(additions_dict['connected_ips'])} devices were connected to the network, "
                            f"and {len(additions_dict['blacklist_ips'])} devices were blacklisted. (Unauthorized)\n"
                        )
                    else:
                        general_report += "Second, No devices were connected to the network or blacklisted.\n"
                else:
                    response_metadata['ip_groups'] = {
                        'connected_ips': [],
                        'blacklist_ips': []
                    }

                    general_report += "Second, No devices were connected to the network or blacklisted.\n"
                # IP Group Additions Data

                # Movements and Deletions Data
                movements, deletions = [], []
                if metadata['new_data']['updated'] is not None and metadata['old_data'] is not None:
                    for ip in metadata['new_data']['updated']:
                        if ip.ip_group_name == 'unauthorized':
                            reason = ""
                            if any(obj.ip_group_ip == ip.ip_group_ip for obj in metadata['old_data']):
                                old_ip_group = [
                                    ip_x for ip_x in metadata['old_data'] if
                                    ip_x.ip_group_ip == ip.ip_group_ip
                                ][0]

                                if old_ip_group.ip_is_complete is True and ip.ip_is_complete is False:
                                    reason += "The device was disconnected from the network, "
                                elif old_ip_group.ip_is_complete is False and ip.ip_is_complete is True:
                                    reason += "The device was reconnected, "
                                elif old_ip_group.ip_is_complete is True and ip.ip_is_complete is True:
                                    reason += "The device was already connected, "
                                elif old_ip_group.ip_is_complete is False and ip.ip_is_complete is False:
                                    reason += "The device was already disconnected, "

                                if old_ip_group.ip_group_mac != ip.ip_group_mac:
                                    reason += "The MAC address changed, "

                                reason = reason[:-2] + "."

                                movements.append({
                                    "ip": ip.ip_group_ip,
                                    "action": "Move",
                                    "base_group": old_ip_group.ip_group_name,
                                    "new_group": "unauthorized",
                                    "reason": reason
                                })

                    general_report += f"Third, {len(movements)} devices were moved to the Unauthorized group.\n"
                else:
                    movements = []
                    general_report += "Third, No devices were moved to the Unauthorized group.\n"

                if metadata['new_data']['deleted'] is not None:
                    for ip in metadata['new_data']['deleted']:
                        deletions.append({
                            "ip": ip.ip_group_ip,
                            "action": "Delete",
                            "base_group": ip.ip_group_name,
                            "new_group": "(Deleted)",
                            "reason": "The interface was not the main interface."
                        })
                    general_report += f"Fourth, {len(deletions)} devices were deleted from the database.\n"
                else:
                    deletions = []
                    general_report += "Fourth, No devices were deleted from the database.\n"

                final = movements + deletions

                if len(final) > 0:
                    response_metadata['movements'] = [
                        {
                            "ip": final[i]['ip'],
                            "action": final[i]['action'],
                            "base_group": final[i]['base_group'],
                            "new_group": final[i]['new_group'],
                            "reason": final[i]['reason']
                        }
                        for i in range(len(final))
                    ]
                else:
                    response_metadata['movements'] = []
                # Movements and Deletions Data

                # IP Changes Data
                ip_changes = []
                if metadata['new_data']['updated'] is not None and metadata['old_data'] is not None:
                    for ip in metadata['new_data']['updated']:
                        if any(obj.ip_group_ip == ip.ip_group_ip for obj in metadata['old_data']):
                            columns, previous, current = [], [], []

                            old_ip_group = [
                                ip_x for ip_x in metadata['old_data'] if ip_x.ip_group_ip == ip.ip_group_ip
                            ][0]

                            for attribute, value in vars(old_ip_group).items():
                                current_value = getattr(ip, attribute)
                                if attribute != 'ip_group_id':
                                    columns.append(attribute)
                                    previous.append(value)
                                    current.append(current_value)

                            ip_changes.append({
                                "ip": ip.ip_group_ip,
                                "column": columns,
                                "previous": previous,
                                "current": current
                            })

                    general_report += f"Fifth, {len(ip_changes)} devices had changes in their attributes.\n"
                else:
                    ip_changes = []
                    general_report += "Fifth, No devices had changes in their attributes.\n"

                if len(ip_changes) > 0:
                    response_metadata['ip_changes'] = [
                        {
                            "ip": ip_changes[i]['ip'],
                            "column": ip_changes[i]['column'],
                            "previous": ip_changes[i]['previous'],
                            "current": ip_changes[i]['current']
                        }
                        for i in range(len(ip_changes))
                    ]
                else:
                    response_metadata['ip_changes'] = []
                # IP Changes Data

                # General Report
                response_metadata['general_report'] = general_report
                # General Report

                return response_metadata  # Return the response metadata
            else:
                raise ValueError("Metadata is not valid")
        except Exception as e:
            raise e

    def generate_scan_report(self, metadata: dict):
        response = self.process_metadata(metadata)

        # Set up the template to be used
        self.set_template("scan_report.html")

        # Header Data
        self.add_data(
            "app_logo",
            "https://raw.githubusercontent.com/rodrigobarbacode/seven-suite-application/refs/heads/develop/app/static/img/seven_suite_icon.svg"
        )
        self.add_data("company_phone", "+52 686 563 5367")
        self.add_data("company_email", "soporte@red-7.net")
        self.add_data("company_name", "Red 7 Telecomunicaciones")
        self.add_data("company_address", "Calle Alfareros 1301, 21010 Mexicali, Baja California")

        # Body (Metadata)
        self.add_data("general_report", response['general_report'])
        self.add_data("ip_groups", {
            "connected_ips": response['ip_groups']['connected_ips'],
            "blacklist_ips": response['ip_groups']['blacklist_ips']
        })
        self.add_data("movements", [
            {
                "ip": response['movements'][i]['ip'],
                "action": response['movements'][i]['action'],
                "base_group": response['movements'][i]['base_group'],
                "new_group": response['movements'][i]['new_group'],
                "reason": response['movements'][i]['reason']
            }
            for i in range(len(response['movements']))
        ])
        self.add_data("ip_changes", [
            {
                "ip": response['ip_changes'][i]['ip'],
                "column": response['ip_changes'][i]['column'],
                "previous": response['ip_changes'][i]['previous'],
                "current": response['ip_changes'][i]['current']
            }
            for i in range(len(response['ip_changes']))
        ])

        self.export()

        print(f"Scan Report Generated: {self.output_file}")

    def __str__(self):
        return f"PDFGenerator(template_path={self.template_path}, output_file={self.output_file})"

    def __repr__(self):
        return f"PDFGenerator(template_path={self.template_path}, output_file={self.output_file})"
